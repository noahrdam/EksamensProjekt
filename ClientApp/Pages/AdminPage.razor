@page "/admin"
@using Core.Model
@inject HttpClient httpClient
@inject NavigationManager NavigationManager

<h1>Alle ansøgninger</h1>

<head>
    <link rel="stylesheet" href="css/app.css" />
</head>

<div style="text-align: right;">
    <button id="navigate" class="bi bi-arrow-right-circle-fill" @onclick=ToYouthPage>  Til frivilige 16-18</button>
</div>

<div>
    <h3>Uger:</h3>
    @foreach (var week in weeks)
    {
        var weekCount = GetApplicationCountForWeek(week);
        var weekClass = GetButtonClassForWeekCount(weekCount);
        <button @onclick="() => FilterApplicationsByWeek(week)" class="btn m-1 @weekClass">
            Uge @week (@weekCount)
        </button>
    }
</div>

@if (selectedWeek.HasValue)
{
    <div>
        <h3>Perioder i uge @selectedWeek:</h3>
        @foreach (var period in GetPeriodsForWeek(selectedWeek.Value))
        {
            var periodCount = GetApplicationCountForPeriod(period.EventId);
            var periodClass = GetButtonClassForPeriodCount(periodCount);
            <button @onclick="() => FilterApplicationsByPeriod(period.EventId)" class="btn btn-secondary m-1 @periodClass">
                @period.From - @period.To (@periodCount)
            </button>
        }
    </div>
}

@if (applications == null)
{
    <p><em>Loading...</em></p>
}
else if (!filteredApplications.Any())
{
    <p><em>No applications found.</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Kræv Nummer</th>
                <th>Forældre navn</th>
                <th>Mail</th>
                <th>Barnets navn</th>
                <th>Alder</th>
                <th>Tøjstørrelse</th>
                <th>Interesser</th>
                <th>Første prio</th>
                <th>Anden prio</th>
                <th>Samtykke</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ap in filteredApplications)
            {
                <tr>
                    <td>@ap.ParentVolunteer.CrewNumber</td>
                    <td>@ap.ParentVolunteer.Name</td>
                    <td>@ap.ParentVolunteer.Mail</td>
                    <td>@ap.ParentVolunteer.Children[0].Name</td>
                    <td>@ap.ParentVolunteer.Children[0].Age</td>
                    <td>@ap.ParentVolunteer.Children[0].ClothingSize</td>
                    <td>@ap.ParentVolunteer.Children[0].Interests</td>
                    <td>@ap.FirstPrio.From - @ap.FirstPrio.To (Uge @ap.FirstPrio.Week)</td>
                    <td>@ap.SecondPrio.From - @ap.SecondPrio.To (Uge @ap.SecondPrio.Week)</td>
                    <td>
                        @if (!string.IsNullOrEmpty(ap.ConsentForm))
                        {
                            <img src="@ap.ConsentForm" alt="Signature" style="width:200px; height:100px;" />
                        }
                        else
                        {
                            <p>No signature</p>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Application> applications;
    private List<Application> filteredApplications;
    private List<Event> events;
    private int? selectedWeek;
    private int? selectedPeriod;
    private string serverURL = "https://localhost:7095/";
    private List<int> weeks = new List<int> { 27, 28, 30, 31 };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadData();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private async Task LoadData()
    {
        applications = await httpClient.GetFromJsonAsync<List<Application>>($"{serverURL}api/aps/getall");
        events = await httpClient.GetFromJsonAsync<List<Event>>($"{serverURL}api/aps/getallevents");
        filteredApplications = applications ?? new List<Application>();
    }

    private void FilterApplicationsByWeek(int week)
    {
        selectedWeek = week;
        selectedPeriod = null;
        FilterApplications();
    }

    private void FilterApplicationsByPeriod(int eventId)
    {
        selectedPeriod = eventId;
        FilterApplications();
    }

    private void FilterApplications()
    {
        if (selectedWeek.HasValue)
        {
            filteredApplications = (applications ?? new List<Application>())
                .Where(ap => ap.FirstPrio.Week == selectedWeek.Value)
                .ToList();

            if (selectedPeriod.HasValue)
            {
                filteredApplications = filteredApplications
                    .Where(ap => ap.FirstPrio.EventId == selectedPeriod.Value)
                    .ToList();
            }
        }
        else
        {
            filteredApplications = applications ?? new List<Application>();
        }
    }

    private List<Event> GetPeriodsForWeek(int week)
    {
        return (events ?? new List<Event>()).Where(e => e.Week == week).ToList();
    }

    private int GetApplicationCountForWeek(int week)
    {
        return (applications ?? new List<Application>()).Count(ap => ap.FirstPrio.Week == week);
    }

    private int GetApplicationCountForPeriod(int eventId)
    {
        return (applications ?? new List<Application>()).Count(ap => ap.FirstPrio.EventId == eventId);
    }

    private string GetButtonClassForWeekCount(int count)
    {
        if (count < 13)
            return "btn-green";
        else if (count < 18)
            return "btn-yellow";
        else
            return "btn-red";
    }

    private string GetButtonClassForPeriodCount(int count)
    {
        if (count < 6)
            return "btn-green";
        else if (count < 10)
            return "btn-yellow";
        else
            return "btn-red";
    }

    private async Task ToYouthPage()
    {
        NavigationManager.NavigateTo("/youth", forceLoad: true);
    }
}
